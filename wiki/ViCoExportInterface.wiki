#summary Description of the REST interface for exporting video from ViCo

= Introduction =

This page details the REST interface for exporting video from !ViCo.  This can be to an actual video format e.g. an avi file or an flv file, or it can be via an RTP stream to a unicast or multicast address.

= Details =

|| *HTTP Method* || *URL Format* || *Return Content Types* || *Return Codes* || *Description* ||
|| GET || {{{http://<url>/export/<id>/list}}} || text/xml || 200 (OK) || Gets a description of the streams in the session. ||
|| GET || {{{http://<url>/export/<id>?<file-parameters>}}} || Varies || 200 (OK) || Downloads a file of the session from the server.  The {{{<file-parameters>}}} (see below) determine the content type ||
|| GET || {{{http://<url>/export/<id>/changed[?changeid=<cid>&waitTime=<time>]}}} || text/xml || 200 (OK) || Indicates if a live stream has changed. ||
|| POST || {{{http://<url>/export/<id>/<streamid>?<stream-parameters>}}} || None || 200 (OK), 503 (Unsupported media format) || Sends the stream with id {{{<streamid>}}} from the server using RTP.  If successful, the response will contain a Location header with the {{{<sendid>}}} for the session in it.  The {{{<stream-parameters>}}} (see below) determine what is sent where.  Note that in a ||
|| DELETE || {{{http://<url>/export/<id>/<streamid>/<sendid>}}} || None || 200 (OK) || Stops the sending of the stream identified by {{{<sendid>}}} ||

== Stream Listing ==
The xml returned for the streams will be as follows:
{{{
<streams>

    // One for each stream
    <stream>

        // The id of the stream
        <id>...</id>

        // One for each sub-stream
        <substream>

            <id>...</id>
        
            // If the stream is an audio stream:
            <audio>
                
                // The sample rate of the audio in samples per second
                <samplerate>...</samplerate>
    
                // The sample size of the audio in bits
                <samplesize>...</samplesize>
    
                // The number of channels of audio contained in the stream
                <channels>...</channels>
    
            </audio>
    
            // If the stream is a video stream:
            <video>
                
                // The width of the video in pixels
                <width>...</width>
                
                // The height of the video in pixels
                <height>...</height>
    
            </video>

        </substream>
    
    </stream>
    ...
</streams>
}}}

== Changes ==
This is useful for receiving a live stream via images.  The following parameters can be specified:
|| *Parameter* || *Description* ||
|| substream || The substream to detect the changes of.  If not specified, the first substream will be used. ||
|| changeid || This will be returned in the first response (see below), and should be used in all subsequent requests for changes of this stream and substream (otherwise it will always return true and a new id). ||
|| waitTime || The maximum amount of time (in milliseconds) to wait before returning.  If a change is detected before this time, the service will return immediately, otherwise, it will return false at the end of the time.  This allows an instant response to changes.  If not specified, the waitTime will be 10000 milliseconds. ||

If the stream has changed, the return will be:
{{{
<changes>
    <changed>true</changed>
    <changeid>...</changeid>
</changes>
}}}
otherwise it will be:
{{{
<changes>
    <changed>false</changed>
    <changeid>...</changeid>
</changes>
}}}

== Requested Content Type ==
The requested content type will specify the type of the file to be downloaded.

== Multiple Streams Support ==
The export can contain multiple audio and video streams.  When multiple audio streams are selected, they will be mixed together using a mixer with automatic gain control.  When multiple video streams are selected, they will be placed in positions specified within a single output video stream.  If only one audio and video stream are selected, no mixing will take place.

== File Parameters ==
The following can be specified as query parameters (i.e. {{{<parameter>=<value>}}}) of the url:
|| *Parameter* || *Description* ||
|| videocodec || Specifies the codec to use for the video streams.  If omitted, a default codec will be selected based on the content type requested. ||
|| audiocodec || Specifies the codec to use for the audio streams.  If omitted, a default codec will be selected based on the content type requested. ||
|| streamid || Specifies that the given stream will be included in the resulting file.   Where multiple streams are specified, the streams will be drawn in this order (so later streams will be drawn over earlier streams where they overlap). ||
|| substreamid || Specifies the substream id of the selected streams.  If omitted, the first substream will be chosen. ||
|| width || Specifies the width to be used for the last stream specified, assuming the stream is a video stream (otherwise it is ignored). ||
|| height || Specifies the height to be used for the last stream specified, assuming the stream is an video stream (otherwise it is ignored). ||
|| xpos || Specifies the x coordinate of the last stream specified in the output, assuming the stream is an video stream (otherwise it is ignored). ||
|| ypos || Specifies the y coordinate of the last stream specified in the output, assuming the stream is an video stream (otherwise it is ignored). ||

== Image Output Format ==
When an image output format is chosen, only video streams will be included in the output.  Audio streams will be ignored.  

In a live session, the image will represent the video at the point of the request.  It is recommended that requests of this kind combine with the image change requests to determine when the image has changed sufficiently to be shown to the user.

In a non-live session, an image will be taken for each frame of the video.  The video will progress at the rate at which the images are read.

== Stream Parameters ==
The following can be specified as query parameters (i.e. {{{<parameter>=<value>}}}) of the url:
|| *Parameter* || *Description* ||
|| substreamid || The substream to send.  If not specified, the first substream will be used. ||
|| rtptype || The RTP type to use to send the stream.  If not specified, a default type will be used depending on if the stream is video or audio. ||
|| ag || If true, the Access Grid-compatible formats will be used.  If false or omitted, other default formats will be used. ||
|| name || The name to give the stream when sending.  This is optional. ||
|| note || The note to attach to the stream.  This is optional. ||
|| width || The width with which to send the stream.  If the stream is not a video stream, this will be ignored.  Both height and width must be specified if one is, but if neither are specified, the stream will be sent with a default height and width. ||
|| height || The height with which to send the stream.  If the stream is not a video stream, this will be ignored.  Both height and width must be specified if one is, but if neither are specified, the stream will be sent with a default height and width. ||
|| venue || The URL of an Access Grid Toolkit v3 Virtual Venue to send the stream to. ||
|| address || The IP address (unicast or multicast) to which the stream should be sent. ||
|| port || The UDP port number to which the stream should be sent. ||
|| ttl || The TTL with which to send a multicast stream.  If not specified, 127 will be used. ||